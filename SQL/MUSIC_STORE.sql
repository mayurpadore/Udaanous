									/*			MUSIC STORE DATA ANALYSIS			*/			-- 26/02/25
                                    
USE MUSIC_STORE ; 

SELECT * FROM EMPLOYEE ;
SELECT COUNT(*) FROM EMPLOYEE ;

SELECT * FROM CUSTOMER ;
SELECT COUNT(*) FROM CUSTOMER ;

SELECT * FROM INVOICE ;
SELECT COUNT(*) FROM INVOICE ;

SELECT * FROM INVOICE_LINE ;
SELECT COUNT(*) FROM INVOICE_LINE ;

SELECT * FROM TRACK ;
SELECT COUNT(*) FROM TRACK ;

SELECT * FROM PLAYLIST ;
SELECT COUNT(*) FROM PLAYLIST ;

SELECT * FROM PLAYLIST_TRACK ;
SELECT COUNT(*) FROM PLAYLIST_TRACK ;

SELECT * FROM ARTIST ;
SELECT COUNT(*) FROM ARTIST ;

SELECT * FROM ALBUM2 ;
SELECT COUNT(*) FROM ALBUM2 ;

SELECT * FROM MEDIA_TYPE ;
SELECT COUNT(*) FROM MEDIA_TYPE ;

SELECT * FROM GENRE ;
SELECT COUNT(*) FROM GENRE ;

-- PRIMARY KEY SETUP

ALTER TABLE EMPLOYEE ADD PRIMARY KEY(EMPLOYEE_Id) ;	-- ✅
ALTER TABLE CUSTOMER ADD PRIMARY KEY(CUSTOMER_Id) ;	-- ✅
ALTER TABLE INVOICE ADD PRIMARY KEY(INVOICE_Id) ;	-- ✅
ALTER TABLE INVOICE_LINE ADD PRIMARY KEY(INVOICE_LINE_Id) ;	-- ✅
ALTER TABLE TRACK ADD PRIMARY KEY(TRACK_Id) ;	-- ✅
ALTER TABLE TRACK DROP PRIMARY KEY ;
ALTER TABLE PLAYLIST ADD PRIMARY KEY(PLAYLIST_Id) ;	-- ✅

-- ALTER TABLE PLAYLIST_TRACK ADD PRIMARY KEY(Manu_Id) ;

ALTER TABLE ARTIST ADD PRIMARY KEY(ARTIST_Id) ;	-- ✅
ALTER TABLE ALBUM2 ADD PRIMARY KEY(ALBUM_Id) ;	-- ✅
ALTER TABLE MEDIA_TYPE ADD PRIMARY KEY(MEDIA_TYPE_Id) ;	-- ✅
ALTER TABLE GENRE ADD PRIMARY KEY(GENRE_Id) ;	-- ✅

-- FOREIGN KEY SETUP

ALTER TABLE INVOICE
ADD CONSTRAINT CUSTOMER_Id FOREIGN KEY (CUSTOMER_Id) REFERENCES CUSTOMER (CUSTOMER_Id) ;  -- ✅

ALTER TABLE INVOICE_LINE
ADD CONSTRAINT INVOICE_Id FOREIGN KEY (INVOICE_Id) REFERENCES INVOICE (INVOICE_Id) ;		-- ✅

ALTER TABLE INVOICE_LINE
ADD CONSTRAINT FOREIGN KEY (TRACK_Id) REFERENCES TRACK (TRACK_Id) ;

ALTER TABLE TRACK
ADD CONSTRAINT MEDIA_TYPE_Id FOREIGN KEY (MEDIA_TYPE_Id) REFERENCES MEDIA_TYPE (MEDIA_TYPE_Id) ;		-- ✅

ALTER TABLE TRACK
ADD CONSTRAINT GENRE_Id FOREIGN KEY (GENRE_Id) REFERENCES GENRE (GENRE_Id) ;		-- ✅

ALTER TABLE TRACK
ADD CONSTRAINT ALBUM_Id FOREIGN KEY (ALBUM_Id) REFERENCES ALBUM2 (ALBUM_Id) ;		-- ✅

ALTER TABLE ALBUM2
ADD CONSTRAINT ARTIST_Id FOREIGN KEY (ARTIST_Id) REFERENCES ARTIST (ARTIST_Id) ;		-- ✅

ALTER TABLE TRACK
ADD CONSTRAINT ALBUM_Id FOREIGN KEY (ALBUM_Id) REFERENCES ALBUM2 (ALBUM_Id) ;

ALTER TABLE PLAYLIST_TRACK
ADD CONSTRAINT PLAYLIST_Id FOREIGN KEY (PLAYLIST_Id) REFERENCES PLAYLIST (PLAYLIST_Id) ;		-- ✅




-- Q1) Who is the senior most employee based on job title?  

SELECT FIRST_NAME ,LAST_NAME, TITLE FROM EMPLOYEE 
ORDER BY LEVELS DESC LIMIT 1;

-- Q2) Which countries have the most Invoices? 

SELECT BILLING_COUNTRY AS COUNTRY, COUNT(INVOICE_ID) AS INVOICE FROM INVOICE  
GROUP BY COUNTRY
ORDER BY INVOICE DESC  ;

-- Q3) What are top 3 values of total invoice?  

SELECT BILLING_COUNTRY AS COUNTRY, ROUND(SUM(TOTAL),0) AS TOTAL_INVOICE FROM INVOICE 
GROUP BY COUNTRY
ORDER BY TOTAL_INVOICE DESC  LIMIT 3 ;

-- Q4) Which city has the best customers? We would like to throw a promotional Music Festival in the city we made the most money. 
--     Write a query that returns one city that has the highest sum of invoice totals. Return both the city name & sum of all invoice totals  

SELECT BILLING_CITY AS CITY, ROUND(SUM(TOTAL),0) AS TOTAL_INVOICE FROM INVOICE 
GROUP BY CITY
ORDER BY TOTAL_INVOICE DESC  LIMIT 1 ;

-- Q5) Who is the best customer? The customer who has spent the most money will be declared the best customer. 
--     Write a query that returns the person who has spent the most money  

SELECT FIRST_NAME, LAST_NAME, ROUND(SUM(TOTAL),0) AS TOTAL_INVOICE  FROM INVOICE i
JOIN CUSTOMER c ON i.CUSTOMER_ID = c.CUSTOMER_ID 
GROUP BY fIRST_NAME ,LAST_NAME 
ORDER BY TOTAL_INVOICE DESC  LIMIT 5 ;
